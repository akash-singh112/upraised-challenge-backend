const { Gadget } = require("../models");

// List of possible codenames
const codenames = [
  "The Nightingale",
  "The Kraken",
  "The Phoenix",
  "The Jaguar",
  "The Thunderstrike",
  "The Cyclone",
  "The Falcon",
  "The Shadow",
  "The Avalanche",
  "The Titan",
];

function generateCodeName() {
  return codenames[Math.floor(Math.random() * codenames.length)];
}

const postGadgets = async (req, res) => {
  try {
    const { name, status } = req.body;

    if (!name) {
      return res
        .status(400)
        .json({ success: false, message: "Please provide gadget name" });
    }

    const gadgetStatus = status || "Available";

    const codename = generateCodeName();
    console.log("Codename: ", codename);

    const newGadget = await Gadget.create({
      name,
      status: gadgetStatus,
      codename,
    });

    res.status(201).json({
      success: true,
      content: newGadget,
    });
  } catch (error) {
    console.log("Error in adding Gadget: ", error.message);
    res.status(500).json({
      success: false,
      message: "Error adding gadget",
      error: error,
    });
  }
};

const getGadgets = async (req, res) => {
  try {
    const { status } = req.query;
    const list = !status
      ? await Gadget.findAll()
      : await Gadget.findAll({ where: { status } });
    const probs = list.map((element) => ({
      ...element.toJSON(),
      missionSuccessProbability: `${Math.floor(Math.random() * 100) + 1}%`,
    }));
    res.status(200).json({ success: true, probs });
  } catch (error) {
    console.log("Error in fetching gadgets: ", error.message);
    res.status(500).json({
      success: false,
      message: "Error fetching gadgets",
      error: error,
    });
  }
};

const patchGadgets = async (req, res) => {
  try {
    const id = req.params.id;
    const { name, status, codename } = req.body;
    const gadget = await Gadget.findByPk(id);
    if (!gadget) {
      return res
        .status(404)
        .json({ success: false, message: `Gadget with id: ${id} not found` });
    }
    if (name) gadget.name = name;
    if (status) gadget.status = status;
    if (codename) gadget.codename = codename;

    await gadget.save();

    res.status(200).json({
      success: true,
      message: "Updated successfully",
      content: gadget,
    });
  } catch (error) {
    console.log("Error: ", error);
    res.status(500).json({
      success: false,
      message: "An error occurred while updating the gadget.",
    });
  }
};

const delGadgets = async (req, res) => {
  try {
    const id = req.params.id;

    const gadget = await Gadget.findByPk(id);

    if (!gadget) {
      return res
        .status(404)
        .json({ success: false, message: `Gadget with id: ${id} not found` });
    }

    gadget.status = "Decommissioned";

    await gadget.save();

    res.status(200).json({
      success: true,
      message: "Decommissioned successfully",
      content: gadget,
    });
  } catch (error) {
    console.log("Error: ", error);
    res.status(500).json({
      success: false,
      message: "An error occurred while 'Decommissioning' the gadget.",
    });
  }
};

const selfDestruct = async (req, res) => {
  try {
    const id = req.params.id;
    console.log(id);
    const { confirmCode } = req.body;

    const gadget = await Gadget.findByPk(id);

    if (!gadget) {
      return res
        .status(404)
        .json({ success: false, message: `Gadget with id: ${id} not found` });
    }

    const generatedCode = "70"; // If required, can be generated by a uuidv4() function

    if (generated != confirmCode) {
      return res
        .status(401)
        .json({ success: false, message: "Invalid confirmation code" });
    }

    gadget.status = "Destroyed";

    await gadget.save();

    res.status(200).json({
      success: true,
      message: "Destroyed successfully",
      content: gadget,
    });
  } catch (error) {
    console.log("Error: ", error);
    res.status(500).json({
      success: false,
      message: "An error occurred while triggering the self-destruct sequence",
    });
  }
};

module.exports = {
  getGadgets,
  postGadgets,
  patchGadgets,
  delGadgets,
  selfDestruct,
};
